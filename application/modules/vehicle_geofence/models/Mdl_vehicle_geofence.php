<?php

/*
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

class Mdl_vehicle_geofence extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    /*
     * Get vehicle_geofence_assignment by id
     */

    function get_vehicle_geofence_assignment($id) {
        $this->db->select("vga.id,vga.vehicle_id,vga.geofence_id,plate_no,g.name,g.type,vga.status,date(vga.assign_date) as assign_date"
                        . ",date(vga.update_date) as update_date,"
                        . "CONCAT(u.first_name,',',u.last_name) as assign_uid,"
                        . ",CONCAT(u2.first_name,',',u2.last_name) as update_uid,"
                        . "in_alert,out_alert,sms_alert,email_alert")
                ->from("vehicle_geofence_assignment vga")
                ->join("vehicles v", "v.vehicle_id = vga.vehicle_id", "right")
                ->join("users u", "u.user_id = vga.assign_uid", "left")
                ->join("users u2", "u2.user_id = vga.update_uid", "left")
                ->join("geofence g", "g.id = vga.geofence_id", "left")
                ->where("vga.id", $id)
                ->where("vga.account_id", $this->session->userdata("hawk_account_id"));

        $query = $this->db->get();
        return $query->row_array();
    }

    /*
     * Get all vehicle_geofence_assignment
     */

    function get_all_vehicle_geofence($vehicle_id = null) {
        if (isset($vehicle_id)) {
            $this->db->where("vga.vehicle_id", $vehicle_id);
        }
        $this->db->select("vga.id,plate_no,g.name,g.type,vga.status,date(vga.assign_date) as assign_date"
                        . ",date(vga.update_date) as update_date,"
                        . "CONCAT(u.first_name,',',u.last_name) as assign_uid,"
                        . ",CONCAT(u2.first_name,',',u2.last_name) as update_uid,"
                        . "in_alert,out_alert,sms_alert,email_alert")
                ->from("vehicle_geofence_assignment vga")
                ->join("vehicles v", "v.vehicle_id = vga.vehicle_id", "right")
                ->join("users u", "u.user_id = vga.assign_uid", "left")
                ->join("users u2", "u2.user_id = vga.update_uid", "left")
                ->join("geofence g", "g.id = vga.geofence_id", "left")
                ->where("vga.account_id", $this->session->userdata("hawk_account_id"))
                ->order_by("vga.status", "desc");

        $query = $this->db->get();
        return $query->result();
    }

    /*
     * function to add new vehicle_geofence_assignment
     */

    function add_vehicle_geofence_assignment($params) {
        $params['status'] = 1;
        $this->db->insert('vehicle_geofence_assignment', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update vehicle_geofence_assignment
     */

    function update_vehicle_geofence_assignment($id, $params) {
        $this->db->where('id', $id);
        $response = $this->db->update('vehicle_geofence_assignment', $params);
        if ($response) {
            return "vehicle_geofence_assignment updated successfully";
        } else {
            return "Error occuring while updating vehicle_geofence_assignment";
        }
    }

    /*
     * function to delete vehicle_geofence_assignment
     */

    function delete_vehicle_geofence_assignment($id) {
        $response = $this->db->delete('vehicle_geofence_assignment', array('id' => $id));
        if ($response) {
            return "vehicle_geofence_assignment deleted successfully";
        } else {
            return "Error occuring while deleting vehicle_geofence_assignment";
        }
    }

    function get_all_vehicles() {
        $this->db->select("v.vehicle_id,v.plate_no")
                ->from("vehicles v")
                // ->join("vehicle_geofence_assignment vga", "vga.vehicle_id = v.vehicle_id", "left")
                //->where("vga.vehicle_id IS NULL")
                ->where("v.account_id", $this->session->userdata("hawk_account_id"));

        $query = $this->db->get();
        return $query->result_array();
    }

    function get_all_geofences() {
        $this->db->select("id,name")
                ->from("geofence")
                ->where("status", 1)
                ->where("account_id", $this->session->userdata("hawk_account_id"));

        $query = $this->db->get();
        return $query->result_array();
    }

    function get_geofence_type($geofence_id) {
        $this->db->select("type")
                ->from("geofence")
                ->where("id", $geofence_id);

        $query = $this->db->get();
        return $query->row_array()['type'];
    }

    function add_assignment($data) {
        $data["assign_uid"] = $this->session->userdata("hawk_user_id");
        $data["account_id"] = $this->session->userdata("hawk_account_id");
        return $this->db->insert("vehicle_geofence_assignment", $data);
    }

    function update($data, $id) {
        $data["update_uid"] = $this->session->userdata("hawk_user_id");
        $data["update_date"] = date("Y-m-d H:i:s");
        $this->db->where('id', $id);
        return $this->db->update("vehicle_geofence_assignment", $data);
    }

    function has_active_geofence($vehicle_id,$geofence_id = NULL) {
        $this->db->from("vehicle_geofence_assignment vga")
                ->join("geofence g", "vga.geofence_id = g.id")
                ->where("type", "geofence")
                ->where("vga.status", 1)
                ->where("vehicle_id", $vehicle_id);
				
				if($geofence_id != NULL){
					$this->db->where("vga.geofence_id !=",$geofence_id);
				}
		
        return ($this->db->count_all_results() > 0) ? TRUE : FALSE;
    }

    function has_active_route($vehicle_id,$geofence_id = NULL) {
        $this->db->from("vehicle_geofence_assignment vga")
                ->join("geofence g", "vga.geofence_id = g.id")
                ->where("type", "route")
                ->where("vga.status", 1)
                ->where("vehicle_id", $vehicle_id);
				
		if($geofence_id != NULL){
			$this->db->where("vga.geofence_id !=",$geofence_id);
		}

        return ($this->db->count_all_results() > 0) ? TRUE : FALSE;
    }

    function check_duplicates($vehicle_id, $geofence_id) {
        $this->db->from("vehicle_geofence_assignment vga")
                ->join("geofence g", "vga.geofence_id = g.id")
                ->where("vehicle_id", $vehicle_id)
                ->where("g.id", $geofence_id);

        return ($this->db->count_all_results() > 0) ? TRUE : FALSE;
    }

}
